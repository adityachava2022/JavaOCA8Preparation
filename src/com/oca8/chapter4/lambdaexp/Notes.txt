*Interfaces with only one declared method are called as functional interfaces. They are used in the functional programming.
* Lambda Expressions syntax:
	(arguments) -> (body)
	
* The body can be either a single expression or a statement block. In the expression form, the body is simply evaluated and returned. In the block form, the body is evaluated like a method body and a return statement returns control to the caller of the anonymous method.

* Lambda supports "target typing" which infers the object type from the context in which it is used.

* Deferred execution means that code is specified now but will run later.
* The parenthesis can be omitted if there is only one parameter and its type is not explicitly stated. ex: (a,b -> a.startWith('a'))
* When no braces are used, it is not required to specify the return type or the semicolon.
* Lambdas are only allowed to access the final variables.
* You should not redeclare the variables with the same name inside the expression.

standard interface provided by java:
------------------------------------
public interface Predicate<T> {
	boolean test(T t);
}
* Predicate will take any reference type input and returns a boolean output.
* Arraylist declares a removeIf() method that takes a predicate as input.