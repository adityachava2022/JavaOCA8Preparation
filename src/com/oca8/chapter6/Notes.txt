Understanding Exceptions:
--------------------------
--------------------------
* An exception is an event that alters program flow. Java has a Throwable superclass for all objects that represent these events.
* Error means somthing went horribly wrong that the program should not tempt to recover from it. eg: Disk drive disappeared.
* RuntimeException is defined as extending RuntimeException and their subclasses.These are also known as unchecked exceptions.
  ex: an array index out of bounds is an unchecked exception.
* Checked Exception is defined as extending Exception class and its subclasses except the RuntimeException.
  Checked exceptions tend to be more anticipated—for example, trying to read a fi le that doesn’t exist.

java.lang.Object  ---> java.lang.Throwable --->  java.lang.Exception  ---> java.lang.RuntimeException	(ex : NullPointerException and ArrayIndexOutOfBoundsException)
										   |
										   |-->  java.lang.Error

* Notice that you’re using two different keywords here. throw tells Java that you want to throw an Exception. throws simply declares that the method might throw an Exception. It also might not.

-------------------------------------------------------------------------------------------------------------------------------------
Type 						How to recognize				Okay for program to catch?	 			Is program required to handle or declare?
-------------------------------------------------------------------------------------------------------------------------------------
unChecked exception			subclasses of 					Yes										No
(or)RuntimeExceptions		RuntimeException				
						
Checked Exception			subclasss of Exception except   Yes										Yes
							RuntimeException

Error						subclass of Error				No										No
---------------------------------------------------------------------------------------------------------------------------------------

using a try statement:
----------------------
----------------------
* try should have curly braces even if there is one single statement inside the try block.
* try without a catch block is invalid.
finally :
-----------
* The finally block always executes, whether or not an exception occurs in the try block. If exception is thrown then after
catch block finally block is executed. If exception is not thrown then finally is executed.
* Catch block is not required if finally is present.
* When System.exit(0) is called in the try or catch block, finally does not run.(this is the exception case)

* Java program executes based on the order in which the catch blocks appear.
* If the exception is not reached in one of the catch blocks, a compiler error about unreachable code occurs.This
happens when a superclass exception is caught before the subclass exception.

Recognizing Common Exception Types:
-----------------------------------
Runtime Exceptions:
------------------
Runtime Exceptions extend RuntimeException class.They don't need to be handled or declared.They can be thrown by programmer or java program.

Common runtime exceptions include the following:
-------------------------------------------------
ArithmeticException            - Thrown by the JVM when code attempts to divide by zero
ArrayIndexOutOfBoundsException - Thrown by the JVM when code uses an illegal index to access an array
ClassCastException 			   - Thrown by the JVM when an attempt is made to cast an object  to a subclass of which it is not an instance
IllegalArgumentException 	   - Thrown by the programmer to indicate that a method has been passed an illegal or inappropriate argument
NullPointerException 		   - Thrown by the JVM when there is a null reference where an object is required
NumberFormatException          - Thrown by the programmer when an attempt is made to convert a string to a numeric type but the string doesn’t have an appropriate format

Checked Exceptions:
-------------------
Checked exceptions are subclasses of Exception class but should not contain RuntimeExceptions in their hierarchy.They need to be handled 
and declared. They can be thrown by programmer or java program.

Common checked exceptions include the following: 
FileNotFoundException - Thrown programmatically when code tries to reference a file that does not exist.
IOException           - Thrown programmatically when there’s a problem reading or writing a file

FileNotFoundException is a child of IOException.

Errors:
-------
Errors extend the Error class. They are thrown by the JVM and should not be
handled or declard.

ExceptionInInitializerError - Thrown by the JVM when a static initializer throws an exception and doesn't handle it.
StackOverflowError          - Thrown by the JVM when a method calls itself too many times.(this is called as infinite recursion.)
NoClassDefFoundError        - Thrown by the JVM when a class that the code uses
is available at compile time but not runtime.

Calling Methods That Throw Exceptions :
--------------------------------------
*Checked exceptions must be handled or declared.
subclasses:
-----------
* When a class overrrides a method from its superclass or implements a method from an interface .It’s not allowed to add new checked
exceptions to the method signature.
* A subclass is allowed to declare fewer exceptions than the superclass or interface. Similarly, a class is allowed to declare a subclass of an exception type.
Printing an Exception:
----------------------
3 ways of printing exceptions:
1)only exception
2)only exception message
3)print stacktrace
* Every time you call a method, Java adds it to the stack until it completes.When an exception is thrown, it goes through the stack until it finds a method that can handle it or it runs out of stack